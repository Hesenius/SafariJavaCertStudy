Q) Which are legal:

A) class X {
    var x = 99;
  }

B) void doStuff(var x) { }

C) void doStuff() {
    var x;
    x = 100;
  }

D) void doStuff() {
    var x = 100;
  }

E) void doStuff() {
    var x = null;
  }

Q) Which are legal:

   A) for (var x = 0; x < 3; x++)
       System.out.println(x);

   B) try (var in = new FileReader("");
           var out = new FileWriter("")) {
      }

   C) try (FileReader in = new FileReader("")) {
      } catch (var ex) { }

   D) void doStuff() {
        var x = new int[]{ 1, 2, 3 };
      }

   E) void doStuff() {
        var x = { 1, 2, 3 };
      }

Q) Given:
var x = true ? "99" : 99;

What is the type of x?
A) none, it's fails to compile
B) int
C) String
D) Object
E) none of the above

Q) What happens here?
var var = "var";

Q) Given:

   String message = """Hello\
   Java 17 World!""";
   System.out.println(message + "XXX");

What is the result?
A) Compilation fails
B) Exception at runtime
C) Hello
   Java 17 World!XXX
D) Hello Java 17 World!XXX
E) Hello Java 17 World!
   XXX

Q) Given:

int x = -1;
System.out.println(x & 5);

What is the result?
A) Compilation fails
B) Exception at runtime
C) -1
D) 0x00000005
E) 5

Q) Given
    int x = 10;
    System.out.println("value is " + (x++ = 99));

What is the result?
A) 10
B) 11
C) 99
D) 109
E) Compilation fails

Q) Given:
int j = 0;
for (int i = 0; i < 3; i++) {
  if (i > ++j && i % 2 == 0) ++i = ++j;
  if (j > i + 2) continue;
  ++j;
  System.out.println(i + ", " + j);
}

What is the result?
A) 0, 2
   1, 4
B) 0, 2
C) 1, 4
D) The program runs forever
E) Compilation fails

Q) Which print "true"
A) String s = "Hello";
   String t = "He";
   t += "llo";
   sout(s == t);
B) String s = "Hello";
   String t = "He";
   t += "llo";
   sout(s.equals(t));
C) StringBuilder s = new StringBuilder("Hello");
   StringBuilder t = new StringBuilder("He");
   t.append("llo");
   sout(s.equals(t));
D) List<String> ls = List.of("Fred", "Jim");
   List<String> ls2 = new ArrayList<>(ls);
   sout(ls.equals(ls2));
E) LocalDate ld = LocalDate.of(2021, 3, 29);
   LocalDate ld2 = LocalDate.of(2021, 3, 29);
   sout(ld.equals(ld2));

Q) Which are true?
class X {
  static String h = "Hel" + "lo";
}
  String s1 = "Hello";
  String s2 = new StringBuilder("Hello").toString();
  String s3 = s2.intern();
A) s1 == s2
B) s2 == s3
C) s1 == s3
D) X.h == s1
E) None of the above

Q) Given:
  public class Scr {
    static int x = -1;
    public static void main(String[] args) { new ScrSub().doStuff();}
  }
and:
  class ScrSub extends Scr {
    int x = 99;
    void doStuff() {
      System.out.print(x + ","); // line n1
      int x = 100;
      System.out.print(x + ",");
      System.out.print(Scr.x + ",");
    }
  }
What is the result?
A) Compilation fails at line n1
B) Exception at line n1
C) 99, 100, -1
D) 0, 100, 99
E) 0, 100, -1

Q) Given:
Object obj = "Hello"; boolean answered = false;
if (obj instanceof String) {
  String str = (String)obj;
  if (str.length() > 3) { System.out.println(str); answered = true; }
}
if (!answered) System.out.println("Nope");
Which replace the if clause to produce the same output?
A)    System.out.println(obj instanceof String str && str.length() > 3 ? str : "Nope");
B)    if (obj instanceof String str when str.length() > 3)
        System.out.println(str);
      else
        System.out.println("Nope");
C)    if (obj instanceof String str if str.length() > 3)
        System.out.println(str);
      else
        System.out.println("Nope");
D)    System.out.println(obj instanceof String.class str && str.length() > 3 ? str : "Nope");
E)    if (!(obj instanceof String str) || str.length() <= 3)
        System.out.println("Nope");
      else
        System.out.println(str);

Q) Which print true?
Iterable<String> is = List.of("a", "b", "c");
Object obj = is;
A) System.out.println(is instanceof List);
B) System.out.println(obj instanceof List l && l.size() > 2);

if (obj instanceof List) {
  List l = (List)obj;
  ...

C) System.out.println(obj instanceof List<String> ls);
D) System.out.println(is instanceof Collection<? extends CharSequence> cs);
E) System.out.println(is instanceof List<String> ls || ls.size() > 2);

Q) Given:
enum Day {MONDAY;}

Given a switch statement:
    switch (x) {
    }

What type(s) are valid for x?
A) Boolean
B) Character
C) int
D) Day
E) String

Q) Given:
    String s = "Hello";
    switch (s) {
      case "Hello" ->
          System.out.print("Bonjour "); // line n1
          System.out.print("Guten Tag ");
      default -> System.out.print("Bye");
    }

Which is true?
A) The code prints: Bonjour Guten Tag Bye
B) The code prints: Bonjour Guten Tag
C) If line n1 is removed the code prints: Guten Tag Bye
D) If line n1 is removed the code prints: Guten Tag
E) The code fails to compile

Q) Given
    short s = 8;
    System.out.println(switch (s) { // line n1
      // line n2
      default -> "It's something else"; // line n3
    });

Which are true?
A) Compilation fails at line n1
B) Compilation fails at line n3
C) The code runs and prints It's something else
D) Adding at line n2
   case 2,4,6,8 -> "Even < 10";
   gives the output Even < 10
E) Adding at line n2
   case 2 -> case 4 -> case 6 -> case 8 -> "Even < 10";
   gives the output Even < 10

Q)  Given:
  public static void funct(int x) {
    x = x + 1;
  }

and:
    int x = 99;
    funct(x);
    System.out.println(x);

  What is the result?
  A) 99
  B) 100
  C) An error

Q)
  public static void q13A(int[] x) {
    x[0] = x[0] + 1;
  }

and:
    int x[] = {99};
    q13A(x);
    System.out.println(x[0]);

  What is the result?
  A) 99
  B) 100
  C) An error

Q) Given
  public static void q14A(Integer x) {
    x = x + 1;
  }

and:
  public static void main(String[] args) {
    Integer x = 99;
    q14A(x);
    System.out.println(x);
  }

  What is the result?
  A) 99
  B) 100
  C) An error

Q) Given:
  void doStuff(int x, int y) {}         // Method A
  void doStuff(int x, long y) {}        // Method B
  void doStuff(long x, int y) {}        // Method C
  void doStuff(int ... x) {}            // Method D
  void doStuff(Integer x, Integer y) {} // Method E

and a call:
    doStuff(1, 2);

If method A is deleted which method is invoked?
A) Method B is invoked
B) Method C is invoked
C) Method D is invoked
D) Method E is invoked
E) Compilation fails

Q) Given:
  class MyException extends Exception {}
  static void mightBreak() throws IOException, FileNotFoundException, SQLException {}
and:
  void caller() throws Throwable {
    try {
      mightBreak();
    }
    catch (IOException e) {}
    // line n1
  }
What can be added at line n1?
A) catch (IOException e) {}
B) catch (FileNotFoundException e) {}
C) catch (SQLException e) {}
D) catch (Exception e) {}
E) catch (MyException e) {}

Q) Given
  void doStuff() throws IOException {};
  void doStuff2() throws FileNotFoundException {};
And:
  void tryStuff() {
    try {
      doStuff();
      doStuff2();
    } enter code here {
      // handle both exceptions
    }
  }
What can be inserted at "enter code here"
to provide handling of exceptions from both
methods?
A) catch (IOException | FileNotFoundException e)
B) catch (FileNotFoundException | IOException e)
C) catch (FileNotFoundException e)
D) catch (IOException e)
E) finally

Q) Given:
class AC implements AutoCloseable {
  private String name;
  public AC(String name) { this.name = name; }
  @Override public void close() { System.out.print("Closing " + name); }
}
And:
  var ac0 = new AC("zero");
  try (
      var ac1 = new AC("one");
      var ac2 = new AC("two");
      ac0;
  ) { }

What is the result?
A) Compilation fails
B) Closing zero   Closing two   Closing one
C) Closing zero  Closing one   Closing two
D) Closing two   Closing one   Closing zero
E) Closing one   Closing two   Closing zero

Q) Given
class AC4 implements AutoCloseable {
  @Override
  public void close() throws Exception {
    throw new SQLException();
  }
}
And:
    try (
        var one = new AC4();
        var two = new AC4();
        ){
      throw new FileNotFoundException();
    }
Which are true?
A) Compilation fails
B) A FileNotFoundException is thrown to the caller
C) An SQLException is thrown to the caller
D) close methods of resources "one" and "two" are called
E) close methods of resources "one" and "two" are not both called

Q) Given:
enum Day {
  MONDAY(1), TUESDAY;
  public Day(int d) {}
  public Day() {}
}
and:
System.out.println(Day.MONDAY)

What is the result?
A) 1
B) MONDAY
C) Day.MONDAY
D) Exception at runtime
E) Compilation fails

Q) Given
enum X {
  A, B;
  // line n1
}
Which can be added at line n1?
A) @Override public String toString() { return name().toUpperCase(); }
B) public String toString() { return name().toUpperCase(); }
C) public String name() { return super.name().toUpperCase(); }
D) public static String name(X x) { return x.name().toUpperCase(); }
E) none of the above

Q) Given:
class Outer1 {
  class Inner1 {
    private int y = 100;
    // line n1
  }
  private int x = 99;
  // line n2
}
and these method proposals:
void showX() { sop("x is " + x); }
void showY() { sop("y is " + y); }
void showAnotherY(Inner1 another) { sop("y is " + another.y); }
static Inner1 makeOne() { return new Inner1(); }

Which is/are true?
A) showX can be added at line n1
B) showY can be added at line n2
C) showAnotherY can be added at line n2
D) makeOne can be added at line n1
E) makeOne can be added at line n2

Q) Given
class Outer {
  class Inner{
  }
}
Which create an instance of Inner?
A) new Inner();
B) new Outer.Inner();
C) Outer ou = new Outer(); new ou.Inner();
D) new Outer().new Inner();
E) new Outer() { new Inner(); }

Q) Given:
record Client(String name, int creditLimit) {
 line n1
}
A) At line n1
   public Client(String name) { this(name, 0); }
B) at line n1
   public Client(String name, int creditLimit) {
     super();
     this.name = name;
     this.creditLimit = creditLimit;
   }
C) as a separate declaration:
   record SpecialClient(String name, int creditLimit, String greeting)
     extends Client(name, creditLimit) {}
D) at line n1
   private Client() { this("Unknown", 0); }
E) at line n1
   Client {}

Q) Given:
record Fruit(String type, String color) {}

and:
    Fruit f1 = new Fruit("banana", "yellow");
    Fruit f2 = new Fruit("banana", "yellow");
    // line n1

Which is/are true at line n1
A)    System.out.println(f1 == f2);  prints true
B)    System.out.println(f1.equals(f2));  prints true
C)    f1.color = "brown"; is valid
D)    System.out.println(f1.color); prints yellow
E)    System.out.println(f1.color()); prints yellow

Q)
Given:
public static Predicate<String> getOne(int x) {
  return new Predicate<String>() {
    @Override
    public boolean test(String s) {
      return s.length() >= ++x;
    }
  };
}
and:
System.out.println(
    List.of("Fred", "Jim", "Sheila")
        .removeIf(getOne(3)));

What is the result?
A) true
B) [Fred, Jim]
C) [Jim]
D) Compilation fails
E) Exception at runtime

Q) Given:
  interface StudentCriterion {
    boolean test(Student s);
  }

and:
  class Student {
    public int getGpa() { return 0; }
    public List<String> getCourses() { return null; }
  }

    Which are legal (individually):
    A) StudentCriterion sc = Student s -> { return s.getGpa() > 3;};
    B) StudentCriterion sc = s -> { s.getGpa() > 3 };
    C) Object sc = s -> {return s.getGpa() > 3;};
    D) StudentCriterion sc = (s) -> s.getGpa() > 3;
    E) StudentCriterion sc = s -> s.getCourses().size();

Q) Which are legal individually:
A) Function<String, String> fss = s -> { System.out.println(s); };
B) Consumer<String> cs = s -> { System.out.println(s); };
C) Supplier<String> ss = (s1, s2) -> s1 + s2;
D) BiPredicate<String> bps = (String s) -> { return s.length() > 0; };
E) ToIntFunction<String> tofs = s -> s.length();

Q) Which are correct declarations?
A) Comparator<String> cs = s1, s2 -> s2.compareTo(s1);
B) Comparator<String> cs = (s1, s2) -> s2.compareTo(s1);
C) Comparator<String> cs = (var s1, String s2) -> s2.compareTo(s1);
D) Comparator<String> cs = (var s1, s2) -> s2.compareTo(s1);
E) Comparator<String> cs = (String s1, String s2) -> s2.compareTo(s1);

Q) Given:
      ???? (s, t) -> s.length() - t.length();

Which are correct inserted in place of ????
A) BiFunction<String, String, Integer> f =
B) BiPredicate<String> f =
C) Comparator<String> f =
D) Supplier<String, Integer> f =
E) BinaryOperator<String> f =

Q)
Given:
  class Base {
    void doBaseStuff() { System.out.println("doBaseStuff"); }
  }
and:
  class Sub extends Base {
    void doBaseStuff() { System.out.println("doSubStuff"); }
  }

In the Base and Sub classes, which are true in isolation?

A) doBaseStuff in Base can be marked throws Exception without causing errors
B) doBaseStuff in Base can be marked throws RuntimeException without causing errors
C) doBaseStuff in Sub can be marked throws Exception without causing errors
D) doBaseStuff in Sub can be marked throws RuntimeException without causing errors
E) if doBaseStuff in Base were marked throws Exception,
   then doBaseStuff in Sub can be marked throws IOException without causing errors

Q)
Given:
  class Q23Base {
    public Q23Base get() {
      return null;
    }
  }

  class Q23Sub extends Q23Base {
  }

Which methods may individually be added to Q23Sub?

A) public Q23Base get() { return null; }
B) public Q23Sub get() { return null; }
C) public Runnable get() { return null; }
E) None of these

Q)  Given:
  public int getValue() {
    return 1;
  }

  Which of these methods may individually be added to a subclass of this class?
  A) public int getValue(int x) {return 1;}
  B) public String getValue() {return "Hello";}
  C) public String getValue(int x) {return "Hello";}

Q) Given:
class Parent {
  Parent(int x) { y += x; out.print(", P-c: y is " + y); }
  static { out.print(", P-si: x is " + Parent.x); }
  static int x = 99;
  int y = 100;
  { y++; out.print(", P-i: y is " + y); }
}
class Child extends Parent {
  int x = 200;
  static int y = 300;
  Child() { super(x); }
  Child(int x) { this(); }
  { out.print(", C-i x: is " + x); }
  static { out.print(", C-si: y is " + y); }
}
class InitOrder3 {
  public static void main(String[] args) {
    out.print("Hello!");
    new Child(-1);
    out.println(" Goodbye!");
  }
}
What is the result?
A) Compilation fails
B) Exception at runtime
C) Hello!, P-si: x is 0, C-si: y is 300, P-i: y is 101, P-c: y is 401, C-i x: is 200 Goodbye!
D) , P-si: x is 0, C-si: y is 300Hello!, P-i: y is 101, P-c: y is 401, C-i x: is 200 Goodbye!
E) Hello!, P-si: x is 99, C-si: y is 300, P-i: y is 101, P-c: y is 100Goodbye!
